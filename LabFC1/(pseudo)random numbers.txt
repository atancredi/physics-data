Analysis of generators of numbers evenly distributed in a given range, considering mostly linear congruential generators.
Parameters characterizing a generator: module and multiplier.
Detailed discuss of pure multiplicative generators, with pratical examples.
Useful procedures in order to verify a generator's quality: chi-squared test and Kolmogorov-Smirnov test, with details on practical application.
Final discussion on shift register based generators and pseudocasual number generation with a non-even distribution.

The basic concept is that we tipically, as humans, mark as "randomic" the events that we do not understand; so creating a good enough sequence of random numbers can actually "trick" ourselves, or the physical system that is being studied.

-LINEAR CONGRUENTIAL GENERATORS
Consider a sequence of random numbers spread with a distribution that is even between 0 and 1.
This is the first step to generate an even distribution in a generical range (a,b) and then non-even distributions.
Calculators represents real numbers using a number N of bits (usually 32 or 64): in order to generate real numbers R(n) we have to generate whole numbers I(n) evenly spread between 0 and 2^N - 1 and then define the real numbers with R(n) = I(n)/(2^N - 1).
Note that R(n) stays between 0 and 1, and the side values are: for I(n)=0 -> R(n)=0.0 ; for I(n)=2^N - 1 -> R(n) = 1.0
So LCGs are in the form:
    I(n+1) = (a*I(n) + b) mod m, where
    a: multiplier (moltiplicatore)
    b: increment (incremento)
    m: module (modulo) -> it is the maximum period that the generator can have
       (it is good for a generator to have a high period)
    I(0) is the seed that initializes the generator

The period T of a sequence of numbers is defined as the minumun number of sequence's values after whom they repeat themselves periodically.
The period is the distance between two occurrencies of the same number.

It is good practice to define a specific type when dealing with random numbers, in order to make the code portable when compiled in different architectures where the types has different length.
   typedef long int RANDOM_TYPE;
   (placed right after the include and define section)

Choosing the module:
    Important if you want to have a long period. Knowing that the period T must be less than or equal to the module, the bigger is the module the longest is the period.
    Also important to choose a value of m that can make the operations faster. For example, m=2^32 for 32-bit types, or m=2^64 for 64-bit types.
    This way is possible to avoid a very resource consuming quotient, and the truncation is made directly by the calculator's hardware:
    when the value requires more than 32 (or 64) bit the most significant bits of the word are eliminated.
    The method can reduce resource usage but it invalidates a bit the quality of the generator, because the least significant bits shows often correlations that are much more evident than the ones showed by the most significant bits (due to the nature of the multiplication)
    Choosing a module m = 2^L +- 1, where L=lenght in bit of the used word, helps creating a quality generator.

Choosing the multiplier:
    It is possible to determinate a value for 'a' such that T (with m fixed) is the maximum possible?
    N.B. Zero can be considered as multiple of every number.
    -Maximum Period Theorem (Teorema del massimo periodo):
     A linear congruential sequence has a period T=m if and only if
     1. b is relatively prime to m (b and m doesn't have any common dividers);
     2. (a-1) is multiple of p for every p divider of m.
     3. if m is muliple of 4, (a-1) is multiple of for
     The occurrence of a non-maximum period that still verifies the conditions 1-3 (or vice versa) is an internal incoherence.
     

-PURE MULTIPLICATIVE GENERATORS
Generators where b=0. They have the advantage of being faster than the LCG because they have to solve half the operations.
The period of a pure multiplicative generator tends to be shorter than the period of the LCGs.

